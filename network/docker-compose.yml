#
# Copyright IBM Corp All Rights Reserved
#
# SPDX-License-Identifier: Apache-2.0
#
version: '2'

networks:
  basic:

services:
  ca.org1.example.com:
    image: hyperledger/fabric-ca
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server   # 컨테이너의 경로 !!로컬 리눅스경로 아님!!
      - FABRIC_CA_SERVER_CA_NAME=ca.org1.example.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem   # 인증서에 서명하는 부분
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/${CA1_PRIVATE_KEY} # 인증서에 서명 하는 부분 
                                                                              #( 제너레이트 할때 마다 새로 발급되는 키를 여기다 넣어야 됨 .)
    ports:
      - "7054:7054"   # 리눅스로 들어오는 7054 포트번호를 컨테이너의 7054로 연결하는 포트포워딩 설정
    command: sh -c 'fabric-ca-server start -b yuno1:51237841'   # 컨테이너 수행 뒤 실행 명령 ( 후에 수정 필요 )
    volumes:
      - ./crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca.org1.example.com
    networks:
      - basic

  ca.org2.example.com:
    image: hyperledger/fabric-ca
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server   # 컨테이너의 경로 !!로컬 리눅스경로 아님!!
      - FABRIC_CA_SERVER_CA_NAME=ca.org2.example.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem   # 인증서에 서명하는 부분
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/${CA2_PRIVATE_KEY} # 인증서에 서명 하는 부분 
                                                                              #( 제너레이트 할때 마다 새로 발급되는 키를 여기다 넣어야 됨 .)
    ports:
      - "8054:7054"   # 리눅스로 들어오는 7054 포트번호를 컨테이너의 7054로 연결하는 포트포워딩 설정
    command: sh -c 'fabric-ca-server start -b yuno2:51237841'   # 컨테이너 수행 뒤 실행 명령 ( 후에 수정 필요 )
    volumes:
      - ./crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca.org2.example.com
    networks:
      - basic

  ca.org3.example.com:
    image: hyperledger/fabric-ca
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server   # 컨테이너의 경로 !!로컬 리눅스경로 아님!!
      - FABRIC_CA_SERVER_CA_NAME=ca.org3.example.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org3.example.com-cert.pem   # 인증서에 서명하는 부분
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/${CA3_PRIVATE_KEY} # 인증서에 서명 하는 부분 
                                                                              #( 제너레이트 할때 마다 새로 발급되는 키를 여기다 넣어야 됨 .)
    ports:
      - "9054:7054"   # 리눅스로 들어오는 7054 포트번호를 컨테이너의 7054로 연결하는 포트포워딩 설정
    command: sh -c 'fabric-ca-server start -b yuno3:51237841'   # 컨테이너 수행 뒤 실행 명령 ( 후에 수정 필요 )
    volumes:
      - ./crypto-config/peerOrganizations/org3.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca.org3.example.com
    networks:
      - basic

  orderer.example.com:
    container_name: orderer.example.com
    image: hyperledger/fabric-orderer   # orderer 실행파일이 들어있다.
    environment:
      - FABRIC_LOGGING_SPEC=info
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/msp/orderer/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: orderer
    ports:
      - 7050:7050
    volumes:
        - ./config/:/etc/hyperledger/configtx    # genesisblock 수행 을 위한 연결
        - ./crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/:/etc/hyperledger/msp/orderer   # orderer msp구조 공유
        - ./crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/:/etc/hyperledger/msp/peerOrg1   # peer msp구조 공유
    networks:
      - basic

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.org1.example.com
      - FABRIC_LOGGING_SPEC=info
      - CORE_CHAINCODE_LOGGING_LEVEL=info
      - CORE_PEER_LOCALMSPID=Org1MSP    # 기관의 ID
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/   # peer의 MSP구조
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051   # peer 주소와 포트설정
      
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_basic

      - CORE_LEDGER_STATE_STATEDATABASE=LevelDB  # CouchDB or LevelDB를 설정 할 수 있다. LevelDB로 하면 밑에 3개 필요없음. 지금은 CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb1:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=

    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
      - 7051:7051   # 체인코드 연결 노드 명령수행 포트
    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/msp/peer
        - ./crypto-config/peerOrganizations/org1.example.com/users:/etc/hyperledger/msp/users
        - ./config:/etc/hyperledger/configtx
    depends_on:   # 이 서비스가 컨테이너로 수행되려면은 아래 두개가 필요하니까 같이 실행해 주세요
      - orderer.example.com
     # - couchdb1
    networks:
      - basic

  peer0.org2.example.com:
    container_name: peer0.org2.example.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.org2.example.com
      - FABRIC_LOGGING_SPEC=info
      - CORE_CHAINCODE_LOGGING_LEVEL=info
      - CORE_PEER_LOCALMSPID=Org2MSP    # 기관의 ID
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/   # peer의 MSP구조
      - CORE_PEER_ADDRESS=peer0.org2.example.com:7051   # peer 주소와 포트설정
      
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_basic

      - CORE_LEDGER_STATE_STATEDATABASE=LevelDB  # CouchDB or LevelDB를 설정 할 수 있다. LevelDB로 하면 밑에 3개 필요없음. 지금은 CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb2:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=

    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
      - 8051:7051   # 체인코드 연결 노드 명령수행 포트
    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/msp/peer
        - ./crypto-config/peerOrganizations/org2.example.com/users:/etc/hyperledger/msp/users
        - ./config:/etc/hyperledger/configtx
    depends_on:   # 이 서비스가 컨테이너로 수행되려면은 아래 두개가 필요하니까 같이 실행해 주세요
      - orderer.example.com
      #- couchdb2
    networks:
      - basic

  peer0.org3.example.com:
    container_name: peer0.org3.example.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.org3.example.com
      - FABRIC_LOGGING_SPEC=info
      - CORE_CHAINCODE_LOGGING_LEVEL=info
      - CORE_PEER_LOCALMSPID=Org3MSP    # 기관의 ID
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/   # peer의 MSP구조
      - CORE_PEER_ADDRESS=peer0.org3.example.com:7051   # peer 주소와 포트설정
      
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_basic

      - CORE_LEDGER_STATE_STATEDATABASE=LevelDB  # CouchDB or LevelDB를 설정 할 수 있다. LevelDB로 하면 밑에 3개 필요없음. 지금은 CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb3:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=

    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
      - 9051:7051   # 체인코드 연결 노드 명령수행 포트
    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/msp:/etc/hyperledger/msp/peer
        - ./crypto-config/peerOrganizations/org3.example.com/users:/etc/hyperledger/msp/users
        - ./config:/etc/hyperledger/configtx
    depends_on:   # 이 서비스가 컨테이너로 수행되려면은 아래 두개가 필요하니까 같이 실행해 주세요
      - orderer.example.com
      #- couchdb3
    networks:
      - basic

  couchdb1:
    container_name: couchdb1
    image: hyperledger/fabric-couchdb
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment: # 디폴트로 설정돼있음. 지금.
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    ports:
      - 5984:5984
    networks:
      - basic

  couchdb2:
    container_name: couchdb2
    image: hyperledger/fabric-couchdb
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment: # 디폴트로 설정돼있음. 지금.
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    ports:
      - 6984:5984
    networks:
      - basic

  couchdb3:
    container_name: couchdb3
    image: hyperledger/fabric-couchdb
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment: # 디폴트로 설정돼있음. 지금.
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    ports:
      - 7984:5984
    networks:
      - basic

  cli:  # 체인코드, 채널을 설정하기 위한 클라이언트 컨테이너
    container_name: cli
    image: hyperledger/fabric-tools
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=info
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051   # 접속하는 peer 의 주소
      - CORE_PEER_LOCALMSPID=Org1MSP                    # 접속하는 기관의 ID
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp   # 접속할때 사용하는 identity
      - CORE_CHAINCODE_KEEPALIVE=10
    working_dir: /etc/hyperledger/configtx
    command: /bin/bash
    volumes:   # 공유폴더 설정해주는거
        - /var/run/:/host/var/run/
        - ./../contract:/opt/gopath/src/github.com/   # 리눅스 안에 있는걸 cli 컨테이너 공유폴더로 연결해주는거 (opt 부터 컨테이너) 
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/   # Identity 공유폴더 연결
        - ./config:/etc/hyperledger/configtx
    networks:
        - basic
    #depends_on:
    #  - orderer.example.com
    #  - peer0.org1.example.com
    #  - couchdb
